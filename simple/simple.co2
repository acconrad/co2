;; -*- mode: lisp; -*-

(nes-header #:num-prg 1 #:mapper 0)

(defvar joypad-data)
(defvar joypad-press)
(defvar joypad-last)
(defvar h-scroll)

(defsub (clear-joypad)
  (set! joypad-data (set! joypad-press (set! joypad-last #xff))))

(defsub (read-joypad)
  (set! REG-JOYPAD-0 1)
  (set! REG-JOYPAD-0 0)
  (loop-down-from x 8
    (lsr (lda REG-JOYPAD-0))
    (rol joypad-data))
  (set! joypad-press (and (eor joypad-last #xff) joypad-data))
  (set! joypad-last joypad-data))

(defsub (clear-nametables)
  (bit REG-PPU-STATUS)
  (set! REG-PPU-ADDR #x20)
  (set! REG-PPU-ADDR 0)
  (loop-down-from y 8
    (loop-down-from x #x100
      (sta REG-PPU-DATA))))

(defsub (clear-chr-ram)
  (bit REG-PPU-STATUS)
  (set! REG-PPU-ADDR (set! REG-PPU-ADDR 0))
  (loop-down-from y #x20
    (loop-down-from x #x100
      (sta REG-PPU-DATA))))

(defsub (enable-nmi)
  (set! ppu-ctrl (ora ppu-ctrl PPU-CTRL-NMI)) ; #x80
  (sta REG-PPU-CTRL))

(defsub (enable-rendering)
  (set! ppu-mask (ora ppu-mask PPU-MASK-SHOW-SPR PPU-MASK-SHOW-BG)) ; #x10 #x08
  (sta REG-PPU-MASK))

(defsub (set-some-palette)
  (bit REG-PPU-STATUS)
  (set! REG-PPU-ADDR #x3f)
  (set! REG-PPU-ADDR #x00)
  (let ((palette-bytes '(#x0f #x30 #x02 #x03)))
    (loop-up-to x 0 (length palette-bytes)
      (set! REG-PPU-DATA (lda palette-bytes x)))))

(defsub (write-one-chr-tile)
  (bit REG-PPU-STATUS)
  (set! REG-PPU-ADDR #x00)
  (set! REG-PPU-ADDR #x10)
  (let ((chr-bytes '(#xee #x44 #x44 #x7c #x44 #x44 #xee)))
    (loop-up-to x 0 (length chr-bytes)
      (set! REG-PPU-DATA (lda chr-bytes x)))))

(defsub (write-one-nametable-tile)
  (bit REG-PPU-STATUS)
  (set! REG-PPU-ADDR #x20)
  (set! REG-PPU-ADDR #x21)
  (set! REG-PPU-DATA #x01))

(defsub (wait-frame)
  (lda frame-num)
  (block WaitLoop
    (cmp frame-num)
    (beq WaitLoop)))

(defvector (reset)
  (init-system)
  (clear-nametables)
  (clear-chr-ram)
  (clear-joypad)
  (set-some-palette)
  (write-one-chr-tile)
  (write-one-nametable-tile)
  (enable-nmi)
  (wait-frame)
  (enable-rendering)
  (block ForeverLoop
    (wait-frame)
    (read-joypad)
    (lsr (and joypad-data #x02))
    (clc)
    (set! h-scroll (adc h-scroll))
    (jmp ForeverLoop)))

(defvector (nmi)
  (push a x y)
  (set! REG-OAM-ADDR 0)
  (set! REG-OAM-DMA 2)
  (inc frame-num)
  (set! REG-PPU-ADDR (set! REG-PPU-ADDR 0))
  (set! REG-PPU-SCROLL h-scroll)
  (set! REG-PPU-SCROLL 0)
  (pull a x y))
