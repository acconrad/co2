;; -*- mode: scheme; -*-
;; co2 Copyright (C) 2016 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(do

 ;; NES header follows
 (asm
  ".byte \"NES\",$1a" ;; number of prg-rom blocks
  ".byte $01" ;; number of chr-rom blocks
  ".byte $01" ;; rom control bytes: horizontal mirroring, no sram or trainer, mapper #0
  ".byte $00,$00" ;; filler
  ".byte $00,$00,$00,$00,$00,$00,$00,$00")

 (defaddr sprite-data #x200) ;; where the sprite control data is
 (defconst sprite-dma 2) ;; dma address is 100X this = $200
 (defaddr pad-data #x300)
 (defconst ppu-name-table-1 #x2400)
 (defconst ppu-palette #x3f00)



 ;; code start
 (org #xc000)

 (defvector (reset)
   (init-system)

   ;; disable all graphics.
   (set! REG-PPU-CTRL 0)
   (set! REG-PPU-MASK 0)
   (init-graphics)
   ;; set basic ppu registers.  load background from $0000,
   ;; sprites from $1000, and the name table from $2000.
   (set! REG-PPU-CTRL #b10001000)
   (set! REG-PPU-MASK #b00011110)

   ;; a global frame counter
   (defvar gframe 0)

   (asm
    ;; go into in infite loop - vblank interrupt takes over
    "loop: jmp loop"))

 (defsub (init-graphics)
   (init-sprites)
   (load-palette))

 (defsub (init-sprites)
   ;; clear page #2, which we'll use to hold sprite data
   ;; (memset writes 256 bytes in one go)
   (memset sprite-data 0)
   (defvar n 0)
   (loop n 0 64
         ;; set up 16 sprites
         (set-sprite-x! n (* n 10)) ;; x pos
         (set-sprite-y! n (* n 10)) ;; y pos
         (set-sprite-id! n (+ n 2)) ;; spr id
         (set-sprite-attr! n 0) ;; attributes
         ))

 (defsub (load-palette)
   ;; copy 32 bytes of bg and sprite palette
   (ppu-memcpy ppu-palette 0 0 #x20 palette 0))


 (defvar rnd-v 200)
 (defsub (rnd)
   (set! rnd-v (+ (xor rnd-v 103) 5))
   rnd-v)
 ;; (defun (rnd)
 ;;   (set! rnd-v (>> (+ (* rnd-v 3) 5) 2))
 ;;   rnd-v)

 (defsub (read-joypad)
   ;; need to 'strobe' register before reading
   (set! REG-JOYPAD-0 1)
   (set! REG-JOYPAD-0 0)
   (loop n 0 8
         (poke! pad-data n (and (peek REG-JOYPAD-0) #x1))))

 (defsub (pressed key)
   (peek pad-data key))

 (defvar sx 0)
 (defvar sy 0)

 (defsub (update-sprite)
   ;; start sprite data dma to the oam
   (set! REG-OAM-DMA sprite-dma)
   (set! sx (+ sx (>> (rnd) 5)))
   (set! sy (+ sy (>> (rnd) 5)))
   ;(set! REG-PPU-SCROLL sx)
   ;(set! REG-PPU-SCROLL sy)
   (read-joypad)

   ;; (cond
   ;;  ((pressed joypad-up) (sub-sprites-y! 0 1 1))
   ;;  ((pressed joypad-down) (add-sprites-y! 0 1 2))
   ;;  (else 0))

   ;; (cond
   ;;  ((pressed joypad-left) (sub-sprites-x! 0 1 1))
   ;;  ((pressed joypad-right) (add-sprites-x! 0 1 2))
   ;;  (else 0))

   ;; (loop n
   ;;       (and gframe #x3f)
   ;;       (and (+ gframe 12) #x3f)
   ;;       (if (< (rnd) 127)
   ;;           (add-sprites-x! n 1 (>> (rnd) 4))
   ;;           (sub-sprites-x! n 1 (>> (rnd) 4)))
   ;;       )
   ;; (loop n
   ;;       (and (+ gframe 7) #x3f)
   ;;       (and (+ gframe 22) #x3f)
   ;;       (if (< (rnd) 127)
   ;;           (add-sprites-y! n 1 (>> (rnd) 4))
   ;;           (sub-sprites-y! n 1 (>> (rnd) 4)))
   ;;       )

   (ppu-memset ppu-name-table-1 0 (rnd) 1 (rnd))

   (ppu-memcpy ppu-palette 0 0 #x20 palette 0)

   )

 (defvar tile-id 0)


 (defvar snd 0)

 (defvector (nmi)
   ;; move a sprite or two
   (update-sprite)

   ;; test scrolling
   (set! REG-PPU-SCROLL gframe)
   (set! REG-PPU-SCROLL gframe)

   ;; do some stuff with sound
   (set! REG-APU-CHANNEL (xor (rnd) 123))

   (set! REG-APU-PULSE1-CONTROL #b10011111)
   (set! REG-APU-PULSE1-FT (>> (rnd) 5))
   (set! REG-APU-PULSE1-RAMP (<< (rnd) 5))
   (set! REG-APU-PULSE1-CT #b11111000)
   (set! REG-APU-PULSE2-CONTROL #b10011111)
   (set! REG-APU-PULSE2-FT (>> (rnd) 4))
   (set! REG-APU-PULSE2-CT #b11111000)
   (set! REG-APU-TRI-CONTROL (xor (rnd) 321))
   (set! REG-APU-TRI-FT (xor (rnd) 244))
   (set! REG-APU-TRI-CT (xor (rnd) 82))
   (set! REG-APU-NOISE-ENV (xor (rnd) 321))
   (set! REG-APU-NOISE-FT (xor (rnd) 323))
   (set! REG-APU-NOISE-CT (xor (rnd) 21))
   (set! REG-APU-DMC-CONTROL (xor (rnd) 22))
   (set! REG-APU-DMC-DAC (xor (rnd) 22))
   (set! REG-APU-DMC-ADDR (xor (rnd) 22))
   (set! REG-APU-DMC-SIZE (xor (rnd) 22))
   (inc gframe))


 ;; stuff still to tidy up follows...

 ;; load palettes and most chr-rom from binary files
 (deflabel palette)
 (asm ".incbin \"example/example.pal\"")

 (asm "bg:
  ;; attribute table
   .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0
    .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    .pad $fffa")

 (asm ".word nmi, reset, 0")

 (asm ".incbin \"example/sprites.chr\"
; fill the rest of the first chr-rom block with zeroes.
.align $1000

; here begins the second 4k block.  the sprites (all one of them) get their data
; from this page.

.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; character 0: blank
.incbin \"example/sprites.chr\"
.byte $18,$24,$66,$99,$99,$66,$24,$18,$00,$18,$18,$66,$66,$18,$18,$00 ; character 1: diamond sprite

; fill the rest of the chr-rom block with zeroes, giving us exactly 8k of data, which
; is what we want and need.
.align $1000")

 )
