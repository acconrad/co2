;; -*- mode: lisp; -*-
;; What Remains 
;; Copyright (C) 2016 What Remains Entertainment Consortium
;;
;; Licence TBD

(do
 ;; NES header follows

 (asm
  ".byte \"NES\",$1a" ;; "NES" followed by MS-DOS end-of-file
   ".byte $02" ;; number of prg-rom blocks in 16 KB units
   ".byte $06"  ;; number of chr-rom blocks 8 KB units (value 0 means the board uses CHR RAM)   
   ".byte $11" ;; flags 6 (mapper = 1 in high nybble), vertical mirror in lower nybble
   ".byte $00" ;; flags 7 - more rom control bytes
   ".byte $00,$00,$00,$00,$00,$00,$00,$00")
 
    ;; our memory layout
 (defconst sprite-shadow "$200") ;; where the sprite control data is
 (defconst sprite-dma    "#$2") ;; dma address is 100X this = $200
 (defconst display-list  "$300") ;; the display list
 (defconst pad-data      "$400") ;; cache of the current pad state
 (defconst entity-data   "$500") ;; entity state list

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; display commands
 ;; ----------------
 ;; 
 ;; tile-data display primitive: [list of bytes to copy as tile ids]
 (defconst command-tile-data "#$01")
 ;; tile-value display primitive: [length tile-id] 
 ;; for clearing screen etc - 128 long is about max for timing
 (defconst command-tile-value "#$02")
 ;; 2x2 tile quad [tile top left id]
 (defconst command-quad "#$03")
 ;; rom dump [high low length] - 64 maxish
 (defconst command-rom-data "#$04")
 ;; palette change [palette-id]
 (defconst command-palette-change "#$05")

 (defconst screen-blank-delay "#30")
 
 (defconst title-palette-id "#0")
 (defconst title1-palette-id "#1")
 (defconst title2-palette-id "#2")
 (defconst title3-palette-id "#3")
 (defconst eighties-palette-id "#4")
 (defconst indoor-palette-id "#5")
 (defconst future-palette-id "#6")
 (defconst black-palette-id "#7")

 (defconst doorway-aerobic-in "#0")
 (defconst doorway-aerobic-out "#1")
 (defconst doorway-tobacco-in "#2")
 (defconst doorway-tobacco-out "#3")
 (defconst doorway-michael-in "#4")
 (defconst doorway-michael-out "#5")
 (defconst doorway-michael-future "#6")
 
 ;; famitone stuff
 (asm "FT_BASE_ADR = $0600 ;; page in the RAM used for FT2 variables, should be $xx00
       FT_TEMP = $f9 ;; 3 bytes in zeropage used by the library as a scratchpad
       FT_DPCM_OFF = $c000  
       FT_SFX_STREAMS = 4 ;; number of sound effects played at once, 1..4
       FT_DPCM_ENABLE	;; undefine to exclude all DMC code
       FT_SFX_ENABLE	;; undefine to exclude all sound effects code
       FT_THREAD	;; undefine if you are calling sound effects from the same thread as the sound update call
       FT_PAL_SUPPORT   ;; undefine to exclude PAL support
       FT_NTSC_SUPPORT	;; undefine to exclude NTSC support
  ")

 ;; code start
 (org #x8000)
 
 ;; we love globals 
 (defvar gframe 0) ;; 8bit frame counter
 (defvar ganim-frame 0) ;; global anim frame for sprite animation  
 (defvar ggame-mode 0) ;; stores what section of the game we are in, title/eighties/future
 (defvar gtext-box 0) ;; are we showing a text box?
 ;; draw-phase ramps from 0-255 when game modes are switched, for 
 ;; sequencing initialisation/drawlist updates 
 (defvar gdraw-phase 0)
 (defvar gdisable-scroll 0)
 (defvar ggame-state 0)
 
 ;; the current display list index 
 (defvar display-list-index 0)

 (defvar gscroll-x 0)
 (defvar gscroll-y 0)

 ;; random locals for use anywhere
 (defvar n 0)
 (defvar i 0)
 (defvar j 0)
 (defvar k 0)
 (defvar l 0)
 (defvar m 0)
 (defvar o 0)
 (defvar p 0)
 (defvar start 0)
 (defvar end 0)
 (defvar title-screen 0)
 (defvar title-text-line 0)
 (defvar debounce 0)

 ;; text display globals
 (defvar text-pos 0)
 (defvar text-x 0)
 (defvar text-line 0)
 (defvar text-time 0) 
 (defvar text-addr 0)
 (defvar text-addr-h 0)

 (defvar setup-eighties 0)
 (defvar password-pos 0)

 (defconst title-mode "#0")
 (defconst eighties-mode "#1")
 (defconst aerobic-mode "#2")
 (defconst tobacco-mode "#3")
 (defconst michael-mode "#4")
 (defconst future-mode "#5")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; library code follows

 (defun (enable-rendering)
   ;; ;; set basic ppu registers.  load background from $0000,
   ;; ;; sprites from $1000, and the name table from $2000.
   (set! reg-ppu-ctl #b10001000)
   (set! reg-ppu-mask #b00011110))

 (defun (disable-rendering)
   (set! reg-ppu-ctl 0)
   (set! reg-ppu-mask 0)
   (set! reg-ppu-scroll 0)
   (set! reg-ppu-scroll 0))

 ;; mmc1 stuff 
 (defun (mmc1-control a)
   a ;; get argument into register
   ;; rotate into serial output
   (asm "sta $8000")
   (asm "lsr a")
   (asm "sta $8000")
   (asm "lsr a")
   (asm "sta $8000")
   (asm "lsr a")
   (asm "sta $8000")
   (asm "lsr a")
   (asm "sta $8000"))

 (defun (mmc1-chrbank0 a)
   a
   (asm "sta $a000")
   (asm "lsr a")
   (asm "sta $a000")
   (asm "lsr a")
   (asm "sta $a000")
   (asm "lsr a")
   (asm "sta $a000")
   (asm "lsr a")
   (asm "sta $a000"))

 (defun (mmc1-chrbank1 a)
   a
   (asm "sta $c000")
   (asm "lsr a")
   (asm "sta $c000")
   (asm "lsr a")
   (asm "sta $c000")
   (asm "lsr a")
   (asm "sta $c000")
   (asm "lsr a")
   (asm "sta $c000"))

 ;; calls the random number generator
 (defun (rnd) (_rnd))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; sound
 (defun (init-sound)
   ;(asm "ldx #<whatremains_music_data	;play second song
  ; 	ldy #>whatremains_music_data
  ; 	lda x#80
  ; 	jsr FamiToneInit
  ; 	lda #0
  ; 	jsr FamiToneMusicPlay")

   ;; (asm "ldx #<danger_streets_music_data	;play second song
   ;; 	ldy #>danger_streets_music_data
   ;; 	lda #80
   ;; 	jsr FamiToneInit
   ;; 	lda #0
   ;; 	jsr FamiToneMusicPlay")
   
   0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; input stuff

 (defun (read-joypad)
   ;; need to 'strobe' register before reading
   (set! reg-joypad-0 1)
   (set! reg-joypad-0 0)
   (loop n 0 8
         (poke! pad-data n (and (peek reg-joypad-0) #x1))))

 (defun (pressed key)
   (peek pad-data key))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; the display list

 ;; adds a byte to the list
 (defun (display-list-add-byte data)
   (poke! display-list display-list-index data) 
   (inc display-list-index))

 ;; finishes a packet for rendering
 (defun (display-list-end-packet command-id x y nbytes)
   (poke! display-list display-list-index command-id) 
   (inc display-list-index)
   (poke! display-list display-list-index x)
   (inc display-list-index)
   (poke! display-list display-list-index y)
   (inc display-list-index)
   ;; last byte needs to be size for all commands
   (poke! display-list display-list-index nbytes) 
   (inc display-list-index))

 ;; clear pending commands
 (defun (display-list-flush)
   (set! display-list-index 0))

 (defun (display-list-is-empty)
   (eq? display-list-index 0))

 ;; to be called in vblank, all ppu updates should be in here
 (defun (display-list-execute)
   ;; is there anything in the queue?
   (if (eq? display-list-index 0) 0 ;; early out (avoid long branch)
     (do
      ;; reverse to read info (lifo for ease/speed)
      (set! display-list-index (- display-list-index 4))

      (set! n (peek display-list (+ display-list-index 3))) ;; store nbytes
      (set! start (- display-list-index n))
      (set! end display-list-index)

      ;; update tile data
      (when (eq? (peek display-list display-list-index) command-tile-data) 
	(set! end display-list-index)
	(ppu-memcpy ppu-name-table-0 
		    (peek display-list (+ display-list-index 1)) 
		    (peek display-list (+ display-list-index 2))
		    end ;; w
		    display-list
		    start)) ;; start

      ;; update arbitrary length strips of one value (RLE)
      (when (eq? (peek display-list display-list-index) command-tile-value) ;; tileset
	(ppu-memset ppu-name-table-0 
		    (peek display-list (+ display-list-index 1)) 
		    (peek display-list (+ display-list-index 2))
		    (peek display-list start) ;; length
		    (peek display-list (+ start 1)))) ;; tile id

      ;; 2x2 metatile block
      (when (eq? (peek display-list display-list-index) command-quad) 
	(set! o (peek display-list (+ display-list-index 1)))
	(set! p (peek display-list (+ display-list-index 2)))
	(set! i (peek display-list start))
	;; could be optimised a lot
	(ppu-memset ppu-name-table-0 o p 1 i) 
	(ppu-memset ppu-name-table-0 o (+ p 1) 1 (+ i 1)) 
	(ppu-memset ppu-name-table-0 o (+ p 32) 1 (+ i 16)) 
	(ppu-memset ppu-name-table-0 o (+ p 33) 1 (+ i 17))
	)

      ;; copy from PRG-ROM to tile data
      (when (eq? (peek display-list display-list-index) command-rom-data) 
	(set! o (peek display-list start)) ;; prg high
	(set! p (peek display-list (+ start 1))) ;; prg low
	(set! i (peek display-list (+ start 2))) ;; length
	(ppu-memcpy16 ppu-name-table-0 
		      (peek display-list (+ display-list-index 1)) 
		      (peek display-list (+ display-list-index 2))
		      i o))

      (when (eq? (peek display-list display-list-index) command-palette-change) 
	(set! o (peek display-list start)) ;; palette index
	(cond
	 ((eq? o title-palette-id) (ppu-memcpy ppu-palette 0 0 #x10 title_palette 0))
	 ((eq? o title1-palette-id) (ppu-memcpy ppu-palette 0 0 #x10 title1_palette 0))
	 ((eq? o title2-palette-id) (ppu-memcpy ppu-palette 0 0 #x10 title2_palette 0))
	 ((eq? o title3-palette-id) (ppu-memcpy ppu-palette 0 0 #x10 title3_palette 0))
	 ((eq? o eighties-palette-id) (ppu-memcpy ppu-palette 0 0 #x20 eighties_palette 0)) ;; + sprites
	 ((eq? o indoor-palette-id) (ppu-memcpy ppu-palette 0 0 #x20 indoor_palette 0)) 
	 ((eq? o future-palette-id) (ppu-memcpy ppu-palette 0 0 #x10 future_palette 0))
	 (else (ppu-memcpy ppu-palette 0 0 #x20 black_palette 0))))
      
      (set! display-list-index (- display-list-index n)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; utilities that use the display list

 ;; draws a single page of prg-rom defined tiles
 (defun (draw-bg l h page)
   (set! h (+ h page))
   (display-list-add-byte (+ l 0))
   (display-list-add-byte h)
   (display-list-add-byte 64)
   (display-list-end-packet command-rom-data page 0 3)
   (display-list-add-byte (+ l 64))
   (display-list-add-byte h)
   (display-list-add-byte 64)
   (display-list-end-packet command-rom-data page 64 3)
   (display-list-add-byte (+ l 128))
   (display-list-add-byte h)
   (display-list-add-byte 64)
   (display-list-end-packet command-rom-data page 128 3)
   (display-list-add-byte (+ l 192))
   (display-list-add-byte h)
   (display-list-add-byte 64)
   (display-list-end-packet command-rom-data page 192 3))

 ;; draws an entire screens worth of prg-rom defined tiles
 (defun (draw-screen l h)
   (draw-bg l h 0)
   (draw-bg l h 1)
   (draw-bg l h 2)
   (draw-bg l h 3))

;; takes offset from screen 1 in rom
 (defun (draw-screen2 l h)
   (draw-bg l h 4)
   (draw-bg l h 5)
   (draw-bg l h 6)
   (draw-bg l h 7))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; text display

 ;; draw text straight to screen
 (defun (draw-text h l)
   ;; zero terminating strings
   (set! i 1) ;; char
   (set! j 0) ;; count
   (while (not (eq? i 0))
     (set! i (peek16 text-addr j))
     (display-list-add-byte i)
     (inc j))
   (display-list-end-packet command-tile-data h (+ l text-pos) j)
   )

 ;; gradually type text to screen
 (defun (update-typed-text h l)
   (cond
    ((eq? text-time 255)
     ;; don't start till all other drawing has finished
     (when (display-list-is-empty) (set! text-time 0)))
    (else
     (inc text-time)
     (set! i (peek16 text-addr text-pos))
     (when (or (> text-time 3) (eq? i 32)) ;; space
       ;; zero terminating strings
       (when (not (eq? i 0))
	 (display-list-add-byte i)
	 (display-list-end-packet command-tile-data h (+ text-line (+ l text-x)) 1)
	 (inc text-pos)
	 (inc text-x)
	 (when (> text-x 22)
	   (set! text-line (+ text-line 32))
	   (set! text-x 0)))
       (set! text-time 0)))))

 (defun (text-finished)
   (set! i (peek16 text-addr text-pos))
   (if (eq? i 0) 1 0))

 (defun (reset-text) 
   (set! text-x 0)
   (set! text-line 0)
   (set! text-time 255)
   (set! text-pos 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; textbox for character chat

 ;; gtext-box is used both as activation and countdown
 ;; to avoid repeated activation when next to characters

 (defconst text-box-deactivated "#0")
 (defconst text-box-activated "#254")
 (defconst text-box-start-delay "#253")

 ;; create the text box
 (defun (show-textbox)   
   (when (eq? gtext-box text-box-deactivated)  ;; not shown already
     (reset-text)
     (set! text-pos 0)                         ;; reset typing pos
     (set! gtext-box  text-box-activated)))    ;; set to shown

 (defun (update-textbox)   
   (when (eq? gtext-box text-box-activated)   ;; shown activated
     (update-typed-text 3 5)  ;; update typing
     (when (pressed joypad-b)  ;; exit pressed
       (set! gdraw-phase 1)    ;; redraw background
       (set! gtext-box text-box-start-delay)))  ;; start countdown running
   ;; do the count down
   (when (and (< gtext-box text-box-activated) 
	      (not (eq? gtext-box text-box-deactivated))) 
     (dec gtext-box)))

 (defun (update-textbox2)   
   (when (eq? gtext-box text-box-activated)   ;; shown activated
     (update-typed-text 5 0)  ;; update typing
     (when (pressed joypad-b)  ;; exit pressed
       (set! gdraw-phase 1)    ;; redraw background
       (set! gtext-box text-box-start-delay)))  ;; start countdown running
   ;; do the count down
   (when (and (< gtext-box text-box-activated) 
	      (not (eq? gtext-box text-box-deactivated))) 
     (dec gtext-box)))
 

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; sprite stuff
 
 ;; set up a 2x2 block meta sprite
 (defun (setup-character block id)
   (set-sprite-x! id 0)
   (set-sprite-y! id 0)
   (set-sprite-id! id block)
   (set-sprite-attr! id 0)

   (set-sprite-x! (+ 1 id) 8)
   (set-sprite-y! (+ 1 id) 0)
   (set-sprite-id! (+ 1 id) (+ 1 block))
   (set-sprite-attr! (+ 1 id) 0)

   (set-sprite-x! (+ 2 id) 0)
   (set-sprite-y! (+ 2 id) 8)
   (set-sprite-id! (+ 2 id) (+ 16 block))
   (set-sprite-attr! (+ 2 id) 0)

   (set-sprite-x! (+ 3 id) 8)
   (set-sprite-y! (+ 3 id) 8)
   (set-sprite-id! (+ 3 id) (+ 17 block))
   (set-sprite-attr! (+ 3 id) 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; collisions: all assume 2x2 sprites...

 ;; sprites colliding against sprites
 (defun (sprite-collide-sprite sprite-id-a sprite-id-b)
   ;; collide with 4th sprite x/y as centre of 2x2
   (sprite-collide-pos 
    sprite-id-a 
    (get-sprite-x (+ sprite-id-b 3))
    (get-sprite-y (+ sprite-id-b 3))))
 
 ;; sprite pixel pos collision
 (defun (sprite-collide-pos sprite-id x y)
   (and 
    (and
     ;; expanding bbox to get edge-edge collision
     ;; can reduce this to get 'softer' collisions
     (> x (- (get-sprite-x sprite-id) 8))
     (< x (+ (get-sprite-x (+ sprite-id 1)) 16)))
    (and 
     (> y (- (get-sprite-y sprite-id) 8))
     (< y (+ (get-sprite-y (+ sprite-id 2)) 16)))))

 (defun (bb-collide-pos screen x y)
   (cond
    ((eq? ggame-mode eighties-mode)
     (if (eq? screen 0) (bb-collide-pos-screen0 x y)
       (bb-collide-pos-screen1 x y)))
    ((eq? ggame-mode aerobic-mode)
     (bb-collide-pos-aerobic x y))
    ((eq? ggame-mode tobacco-mode)
     (bb-collide-pos-tobacco x y))
    (else
     (bb-collide-pos-michael x y))))
  
 ;; bounding box list collisions for level terrain
 ;; different directions use different hotspots
 ;; still some tweaks todo here
 (defun (bb-collide-pos-screen0 x y)
   ;; read the length of rects to get the end
   (set! end (+ 1 (<< (peek collision_bboxes0) 2))) ;; rect so * 4   
   ;; setup for the loop
   (set! i 1) ;; address
   (set! j 0) ;; return value (1=collision)
   ;; loop through all the collision rects (or until we are inside one)
   (while (and (< i end) (eq? j 0))
     (set! j
	   (and ;; check bounding boxes
	    (and
	     (> x (peek collision_bboxes0 i)) 
	     (< x (peek collision_bboxes0 (+ i 2))))
	    (and 
	     (> y (peek collision_bboxes0 (+ i 1)))
	     (< y (peek collision_bboxes0 (+ i 3))))))
     (set! i (+ i 4))) ;; next bbox
   j)

 (defun (bb-collide-pos-screen1 x y)
   ;; read the length of rects to get the end
   (set! end (+ 1 (<< (peek collision_bboxes1) 2))) ;; rect so * 4   
   ;; setup for the loop
   (set! i 1) ;; address
   (set! j 0) ;; return value (1=collision)
   ;; loop through all the collision rects (or until we are inside one)
   (while (and (< i end) (eq? j 0))
     (set! j
	   (and ;; check bounding boxes
	    (and
	     (> x (peek collision_bboxes1 i)) 
	     (< x (peek collision_bboxes1 (+ i 2))))
	    (and 
	     (> y (peek collision_bboxes1 (+ i 1)))
	     (< y (peek collision_bboxes1 (+ i 3))))))
     (set! i (+ i 4))) ;; next bbox
   j)

 (defun (bb-collide-pos-aerobic x y)
   ;; read the length of rects to get the end
   (set! end (+ 1 (<< (peek collision_bboxes_aerobic) 2))) ;; rect so * 4   
   ;; setup for the loop
   (set! i 1) ;; address
   (set! j 0) ;; return value (1=collision)
   ;; loop through all the collision rects (or until we are inside one)
   (while (and (< i end) (eq? j 0))
     (set! j
	   (and ;; check bounding boxes
	    (and
	     (> x (peek collision_bboxes_aerobic i)) 
	     (< x (peek collision_bboxes_aerobic (+ i 2))))
	    (and 
	     (> y (peek collision_bboxes_aerobic (+ i 1)))
	     (< y (peek collision_bboxes_aerobic (+ i 3))))))
     (set! i (+ i 4))) ;; next bbox
   j)

 (defun (bb-collide-pos-tobacco x y)
   ;; read the length of rects to get the end
   (set! end (+ 1 (<< (peek collision_bboxes_tobacco) 2))) ;; rect so * 4   
   ;; setup for the loop
   (set! i 1) ;; address
   (set! j 0) ;; return value (1=collision)
   ;; loop through all the collision rects (or until we are inside one)
   (while (and (< i end) (eq? j 0))
     (set! j
	   (and ;; check bounding boxes
	    (and
	     (> x (peek collision_bboxes_tobacco i)) 
	     (< x (peek collision_bboxes_tobacco (+ i 2))))
	    (and 
	     (> y (peek collision_bboxes_tobacco (+ i 1)))
	     (< y (peek collision_bboxes_tobacco (+ i 3))))))
     (set! i (+ i 4))) ;; next bbox
   j)

 (defun (bb-collide-pos-michael x y)
   ;; read the length of rects to get the end
   (set! end (+ 1 (<< (peek collision_bboxes_michael) 2))) ;; rect so * 4   
   ;; setup for the loop
   (set! i 1) ;; address
   (set! j 0) ;; return value (1=collision)
   ;; loop through all the collision rects (or until we are inside one)
   (while (and (< i end) (eq? j 0))
     (set! j
	   (and ;; check bounding boxes
	    (and
	     (> x (peek collision_bboxes_michael i)) 
	     (< x (peek collision_bboxes_michael (+ i 2))))
	    (and 
	     (> y (peek collision_bboxes_michael (+ i 1)))
	     (< y (peek collision_bboxes_michael (+ i 3))))))
     (set! i (+ i 4))) ;; next bbox
   j)


 ;; doors to other dimensions

 (defun (doorway-collide-pos door x y)
   (set! i (<< door 2))
   (and ;; check bounding boxes
    (and
     (> x (peek doorway_bbox i)) 
     (< x (peek doorway_bbox (+ i 2))))
    (and 
     (> y (peek doorway_bbox (+ i 1)))
     (< y (peek doorway_bbox (+ i 3))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; entity system

 (defconst entity-id "#0") ;; the sprite id
 (defconst entity-x "#1")
 (defconst entity-screen "#2") ;; the high byte of x
 (defconst entity-y "#3")
 (defconst entity-pattern "#4") ;; for whatever
 (defconst entity-size "#5")

 (defconst num-entities "#7")

 (defconst player-entity "#0")
 (defconst npc1-entity "#5")
 (defconst npc2-entity "#10")
 (defconst npc3-entity "#15")
 (defconst npc4-entity "#20")
 (defconst npc5-entity "#25")
 (defconst npc6-entity "#30")

 (defconst player-sprite "#0")

 (defconst player-sprite-pattern-id "#$00")
 (defconst teacher-sprite-pattern-id "#$a0")
 (defconst dancer1-sprite-pattern-id "#$c0")
 (defconst dancer2-sprite-pattern-id "#$a6")
 (defconst dancer3-sprite-pattern-id "#$c6")
 (defconst dancer4-sprite-pattern-id "#$e0")
 (defconst dancer5-sprite-pattern-id "#$e6")
 (defconst smoker1-sprite-pattern-id "#$60")
 (defconst smoker2-sprite-pattern-id "#$80")
 (defconst michael-sprite-pattern-id "#$40")
 (defconst friend-sprite-pattern-id "#$86")

 (defun (setup-npc-entity type eaddr screen x y col)
   (set! n (peek entity-data (+ eaddr entity-id))) ;; entity/sprite id
   (setup-character type n)
   (or-sprites-attr! n 4 col)
   (poke! entity-data (+ eaddr entity-pattern) type)
   (poke! entity-data (+ eaddr entity-x) x)
   (poke! entity-data (+ eaddr entity-screen) screen)
   (poke! entity-data (+ eaddr entity-y) y))
 
 ;; convert the logical 16bit entity positions into 
 ;; 8bit screen positions
 (defun (update-entities)
   (set! n 0) ;; entity addr
   (set! j 0) ;; sprite addr
   (set! i 0) ;; entity id
   (while (< i num-entities)
     (set! o (peek entity-data (+ n entity-x)))
     (set-sprites-2x2-x! j (- o gscroll-x))
     (set-sprites-2x2-y! j (- (peek entity-data (+ n entity-y)) gscroll-y))

     ;; clip left/right sides for npc's
     (when (> i 0)
       (if (eq? (peek entity-data (+ n entity-screen)) 0)
	   ;; move off the screen
	   (when (> gscroll-x o) (set-sprites-2x2-y! j 245))
	   (when (< gscroll-x (+ o 8)) (set-sprites-2x2-y! j 245))))

     (set! j (+ j 16)) ;; 4 sprites in bytes
     (set! n (+ n entity-size))
     (inc i)))

 (defun (hide-entities)
   (set! j 0)
   (loop i 0 num-entities
     (set-sprites-2x2-y! j 255)
     (set! j (+ j entity-size)))
   (update-entities))

 (defun (entity-move-left addr)
   (set! i (peek entity-data (+ addr entity-x)))
   (set! j (peek entity-data (+ addr entity-screen)))
   (-16! i 0 1)
   (poke! entity-data (+ addr entity-x) i)
   (poke! entity-data (+ addr entity-screen) j))

 (defun (entity-move-right addr)
   (set! i (peek entity-data (+ addr entity-x)))
   (set! j (peek entity-data (+ addr entity-screen)))
   (+16! i 0 1)
   (poke! entity-data (+ addr entity-x) i)
   (poke! entity-data (+ addr entity-screen) j))

 (defun (entity-move-up addr)
   (poke! entity-data 
	  (+ addr entity-y) 
	  (- (peek entity-data (+ addr entity-y)) 1)))

 (defun (entity-move-down addr)
   (poke! entity-data 
	  (+ addr entity-y) 
	  (+ (peek entity-data (+ addr entity-y)) 1)))

 (defun (bb-collide-entity-left addr)
   (bb-collide-pos
    (peek entity-data (+ addr entity-screen))
    (peek entity-data (+ addr entity-x)) 
    (+ (peek entity-data (+ addr entity-y)) 9)))
      
 (defun (bb-collide-entity-right addr)
   ;; check 16 bit left/right
   (set! i (peek entity-data (+ addr entity-x)))
   (set! j (peek entity-data (+ addr entity-screen)))
   (+16! i 0 16) ;; add 16 to current x pos
   (bb-collide-pos 
    j ;; screen id
    i (+ (peek entity-data (+ addr entity-y)) 9)))
   
 (defun (bb-collide-entity-up addr)
   (bb-collide-pos 
    (peek entity-data (+ addr entity-screen))
    (+ (peek entity-data (+ addr entity-x)) 8)
    (+ (peek entity-data (+ addr entity-y)) 8)))

 (defun (bb-collide-entity-down addr)
   (bb-collide-pos 
    (peek entity-data (+ addr entity-screen))
    (+ (peek entity-data (+ addr entity-x)) 8)
    (+ (peek entity-data (+ addr entity-y)) 16)))

 (defun (doorway-collide-entity screen door addr)
   (if (eq? (peek entity-data (+ addr entity-screen)) screen)
       (doorway-collide-pos 
	door
	(+ (peek entity-data (+ addr entity-x)) 8)
	(+ (peek entity-data (+ addr entity-y)) 8))
     0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; game modes

 (defun (switch-game-mode new-mode)
   ;; clear all pending stuff in the queue
   (display-list-flush)
   ;; blank the screen to hide update
   (display-list-add-byte black-palette-id) 
   (display-list-end-packet command-palette-change 0 0 1)
   (set! ggame-mode new-mode)
   (set! text-pos 0)
   ;; reset the draw phase
   (set! gdraw-phase 0))

 (defun (any-key)
   (or (or (pressed joypad-a)
	   (pressed joypad-b))
       (pressed joypad-select)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; game specific code follows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; title

 (defun (update-screen bank palette nam-l nam-h)
   (mmc1-chrbank0 bank)
   (display-list-add-byte palette) 
   (display-list-end-packet command-palette-change 0 0 1)
   (draw-screen nam-l nam-h)
   (display-list-add-byte black-palette-id) 
   (display-list-end-packet command-palette-change 0 0 1)
   (reset-text)
   (set! title-text-line 0))

 (defun (update-title)
   (cond
    ((eq? gdraw-phase 1) 
     (set! debounce 1)
     (set16! text-addr null_text)
     (set! title-screen 0)
     (set! title-text-line 0)
     (set! gscroll-x 0)
     (set! setup-eighties 0)
     (mmc1-chrbank0 0)
     (mmc1-chrbank1 1)
     (update-sprites-title))
    ((eq? gdraw-phase 2)
     (draw-screen (low title_nam) (high title_nam))
     )
    ;; wait before reveal
    ((eq? gdraw-phase screen-blank-delay)
     (display-list-add-byte title-palette-id) 
     (display-list-end-packet command-palette-change 0 0 1))
    ;; let clear happen first
    ((> gdraw-phase screen-blank-delay)
     (update-typed-text 2 100)     
     ))
  
   (when (not (any-key)) (set! debounce 1))

   ;; slideshow mode
   (cond 
    ((and debounce (any-key))     
     (set! debounce 0)
     (cond 
      ((eq? title-screen 0)
       (update-screen 2 title1-palette-id (low title1_nam) (high title1_nam))
       (set16! text-addr intro_1_1)
       (set! title-screen 1))

      ((eq? title-screen 1)
       (cond 
     	((eq? title-text-line 0)
	 (draw-screen (low title1_nam) (high title1_nam))
     	 (set16! text-addr intro_1_2)
     	 (set! title-text-line 1)
     	 (reset-text))
     	((eq? title-text-line 1)
	 (update-screen 4 title2-palette-id (low title2_nam) (high title2_nam))
     	 (set16! text-addr intro_2_1)
     	 (reset-text)
     	 (set! title-text-line 0)
     	 (set! title-screen 2))))

      ((eq? title-screen 2)
       (cond 
     	((eq? title-text-line 0)
	 (draw-screen (low title2_nam) (high title2_nam))
     	 (set16! text-addr intro_2_2)
     	 (set! title-text-line 1)
     	 (reset-text))
     	((eq? title-text-line 1)
	 (update-screen 6 title3-palette-id (low title3_nam) (high title3_nam))
     	 (set16! text-addr intro_3_1)
     	 (reset-text)
     	 (set! title-text-line 0)
     	 (set! title-screen 3))))
       
      ((eq? title-screen 3)
       (cond 
     	((eq? title-text-line 0)
	 (draw-screen (low title3_nam) (high title3_nam))
     	 (set16! text-addr intro_3_2)
     	 (set! title-text-line 1)
     	 (reset-text))
     	((eq? title-text-line 1)
	 (draw-screen (low title3_nam) (high title3_nam))
     	 (set16! text-addr intro_3_3)
     	 (set! title-text-line 2)
     	 (reset-text))
     	((eq? title-text-line 2)
	 (draw-screen (low title3_nam) (high title3_nam))
     	 (set16! text-addr intro_3_4)
     	 (set! title-text-line 3)
     	 (reset-text))
     	((eq? title-text-line 3)
	 (switch-game-mode eighties-mode)))))))) 

 (defun (update-sprites-title)
   (memset sprite-shadow #xff))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; eighties

 (defun (init-sprites-eighties)
   ;; coming back from another mode?
   (when (eq? setup-eighties 0)
     (set! j 0)
     (loop i 0 num-entities
	   (poke! entity-data (+ j entity-id) (<< i 2)) ;; * 4 sprite id
	   (set! j (+ j entity-size)))
     
     (set! n (peek entity-data (+ player-entity entity-id)))
     (poke! entity-data (+ n entity-x) 48)
     (poke! entity-data (+ n entity-y) 191))
   
   (set! j entity-size)
   (loop i 1 num-entities
	 (poke! entity-data (+ j entity-y) #xf0) 
	 (poke! entity-data (+ j entity-x) #xf0) 
	 (set! j (+ j entity-size)))

   ;;(set! setup-eighties 1)
   
   (defvar direction 1)
   (defvar last-dir 1)
   
   (setup-character player-sprite-pattern-id n)
   (setup-npc-entity friend-sprite-pattern-id npc1-entity 1 95 108 3)
   
   )

 (defun (update-eighties) 
   (when (not (eq? gtext-box 255))
     (cond 
      ((eq? gdraw-phase 1) 
       (mmc1-chrbank0 8)
       (mmc1-chrbank1 9)
       (set! gdisable-scroll 0)
       (init-sprites-eighties))
      ;; separate phase so the textbox can redraw on clear
      ;; but leave the sprites where they are etc
      ((eq? gdraw-phase 2) 
       (draw-screen (low bgtiles) (high bgtiles))
       (draw-screen2 (low bgtiles) (high bgtiles))
       )
      ;; wait before reveal
      ((eq? gdraw-phase screen-blank-delay)
       (display-list-add-byte eighties-palette-id) 
       (display-list-end-packet command-palette-change 0 0 1)))

     (when (not (eq? gtext-box text-box-activated))
       (update-sprites-eighties))

     (when (pressed joypad-start)
       (switch-game-mode title-mode)))

   (update-textbox2))

 (defun (update-player player-sprite)
   ;; is the player character moving?
   (defvar running 1)
   (set! i 0)

   (when (pressed joypad-select)
     (set! i #x40))

   (cond
    ((pressed joypad-up)
     ;; set direction to be the sprite offset for the
     ;; (3 frame) animation start facing in this direction
     (set! direction (+ i #x26))
     (when (not (bb-collide-entity-up player-entity))
       (entity-move-up player-entity)))
    
    ((pressed joypad-down)
     (set! direction (+ i #x20))
     (when (not (bb-collide-entity-down player-entity))
       (entity-move-down player-entity)))

    ((pressed joypad-left)
     (set! direction (+ i #x0a))
     (when (not (bb-collide-entity-left player-entity))
       (entity-move-left player-entity)
       (when (not gdisable-scroll)
	 (when (or (and
		    (eq? (peek entity-data entity-screen) 0)
		    (> (peek entity-data entity-x) 127))
		   (and
		    (eq? (peek entity-data entity-screen) 1)
		    (< (peek entity-data entity-x) 127)))
	   (set! gscroll-x (- (peek entity-data entity-x) 127))))))
		 
    ((pressed joypad-right)
     (set! direction (+ i #x04))
     (when (not (bb-collide-entity-right player-entity))
       (entity-move-right player-entity)
       (when (not gdisable-scroll)
	 (when (or (and
		    (eq? (peek entity-data entity-screen) 0)
		    (> (peek entity-data entity-x) 127))
		   (and
		    (eq? (peek entity-data entity-screen) 1)
		    (< (peek entity-data entity-x) 127)))
	   (set! gscroll-x (- (peek entity-data entity-x) 127))))))
       
    (else
     ;; we are not moving
     (set! running 0)))

   ;; animate player character
   (when running 
     (cond 
      ((eq? (and (>> ganim-frame 3) #x3) 0)
       (animate-sprites-2x2! player-sprite direction))
      ((eq? (and (>> ganim-frame 3) #x3) 1)
       (animate-sprites-2x2! player-sprite (+ 2 direction)))
      (else
       (animate-sprites-2x2! player-sprite (+ 4 direction)))))

   (when (not running)
     (if (eq? last-dir (+ i #x0a)) ;; left
	 ;; standing
	 (animate-sprites-2x2! player-sprite #x2)
       (animate-sprites-2x2! player-sprite #x0)))
   
   (when running
     (set! last-dir direction)))

 (defun (animate-npc pattern id)
   ;; convert from entity id to sprite id
   (set! id (peek entity-data (+ id entity-id)))
   (cond 
    ((eq? (and (>> ganim-frame 3) 3) 0)
     (animate-sprites-2x2! id pattern))
    ((eq? (and (>> ganim-frame 3) 3) 1)
     (animate-sprites-2x2! id (+ pattern 2)))
    (else
     (animate-sprites-2x2! id (+ pattern 4)))))

 (defun (pingpong-npc pattern id)
   ;; convert from entity id to sprite id
   (set! id (peek entity-data (+ id entity-id)))
   (set! i (and (>> ganim-frame 3) 7))
   (cond 
    ((eq? i 0)
     (animate-sprites-2x2! id pattern))
    ((eq? i 1)
     (animate-sprites-2x2! id (+ pattern 2)))
    ((eq? i 2)
     (animate-sprites-2x2! id (+ pattern 4)))
    ((eq? i 3)
     (animate-sprites-2x2! id (+ pattern 2)))
    ((eq? i 4)
     (animate-sprites-2x2! id pattern))))

 (defun (update-sprites-eighties)
   (update-player player-sprite)
   (animate-npc friend-sprite-pattern-id npc1-entity)

   (when (sprite-collide-sprite 
	  0 (peek entity-data (+ npc1-entity entity-id)))
     (if (eq? (and ggame-state 3) 3)
	 (set16! text-addr friendsays2)
         (set16! text-addr friendsays))
     (show-textbox))

   ;; exits, after redrawing?
   (when (doorway-collide-entity 0 doorway-aerobic-in player-entity)
     (switch-game-mode aerobic-mode))
   (when (doorway-collide-entity 1 doorway-tobacco-in player-entity)
     (switch-game-mode tobacco-mode))
   (when
       (and
	(eq? (and ggame-state 3) 3)
	(doorway-collide-entity 1 doorway-michael-in player-entity))
     (switch-game-mode michael-mode))
   
   (update-entities)
   
   (inc ganim-frame)
   (when (> ganim-frame 23)
     (set! ganim-frame 0))


   )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; indoor

 (defun (init-sprites-indoor)
   (memset sprite-shadow #xff)
   (set! j 0)
   (loop i 0 num-entities
	 (poke! entity-data (+ j entity-id) (<< i 2)) ;; * 4 sprite id
	 (set! j (+ j entity-size)))
   
   (set! n (peek entity-data (+ player-entity entity-id)))
   (setup-character player-sprite-pattern-id n)
   (poke! entity-data (+ n entity-x) 35)
   (poke! entity-data (+ n entity-y) 100)
   
   (cond
    ((eq? ggame-mode aerobic-mode)  
     (setup-npc-entity teacher-sprite-pattern-id npc1-entity 0 162 99 1)
     (setup-npc-entity dancer1-sprite-pattern-id npc2-entity 0 167 139 2)
     (setup-npc-entity dancer2-sprite-pattern-id npc3-entity 0 191 113 3)
     (setup-npc-entity dancer3-sprite-pattern-id npc4-entity 0 151 113 0)
     (setup-npc-entity dancer4-sprite-pattern-id npc5-entity 0 131 117 3)
     (setup-npc-entity dancer5-sprite-pattern-id npc6-entity 0 141 123 2)
     )
    ((eq? ggame-mode tobacco-mode)     
     (setup-npc-entity smoker1-sprite-pattern-id npc1-entity 0 96 111 1)
     (setup-npc-entity smoker2-sprite-pattern-id npc2-entity 0 184 125 2)
     (setup-npc-entity smoker1-sprite-pattern-id npc3-entity 0 171 93 0)
     (setup-npc-entity smoker2-sprite-pattern-id npc4-entity 0 126 124 0)
     )
    ((eq? ggame-mode michael-mode)     
     (setup-npc-entity michael-sprite-pattern-id npc1-entity 0 100 122 3)
     ))
    
   (set! setup-eighties 1)   
   (defvar direction 1)
   (defvar last-dir 1))
     
 (defun (update-indoor)
   (when (not (eq? gtext-box 255))
     (cond 
      ((eq? gdraw-phase 1) 
       (set! gscroll-x 0)
       (set! gdisable-scroll 1)
       (mmc1-chrbank0 10)
       (mmc1-chrbank1 9)
       (init-sprites-indoor)
       ;; put player by door
       (if (eq? ggame-mode tobacco-mode)
	 (poke! entity-data entity-x 142)
	 (poke! entity-data entity-x 64))
       (poke! entity-data entity-screen 0)
       (poke! entity-data entity-y 98)
       )
      ;; separate phase so the textbox can redraw on clear
      ;; but leave the sprites where they are etc
      ((eq? gdraw-phase 2) 
       (cond
	((eq? ggame-mode aerobic-mode)
	 ;; register that we've been here
	 (set! ggame-state (or ggame-state 1))
	 (draw-screen (low aerobic_nam) (high aerobic_nam)))
	((eq? ggame-mode tobacco-mode)
	 (set! ggame-state (or ggame-state 2))
	 (draw-screen (low tobacco_nam) (high tobacco_nam)))
	((eq? ggame-mode michael-mode)
	 (draw-screen (low michael_nam) (high michael_nam))))
       )
      ;; wait before reveal
      ((eq? gdraw-phase screen-blank-delay)
       (display-list-add-byte indoor-palette-id) 
       (display-list-end-packet command-palette-change 0 0 1)))

     (when (not (eq? gtext-box text-box-activated))
       (update-sprites-indoors))
     )
   
   (update-textbox))

 (defun (update-sprites-indoors)
   (update-player player-sprite)
   (cond 
    ((eq? ggame-mode aerobic-mode)
     (animate-npc teacher-sprite-pattern-id npc1-entity)
     (animate-npc dancer1-sprite-pattern-id npc2-entity)
     (animate-npc dancer2-sprite-pattern-id npc3-entity)
     (animate-npc dancer3-sprite-pattern-id npc3-entity)
     (animate-npc dancer4-sprite-pattern-id npc4-entity)
     (animate-npc dancer5-sprite-pattern-id npc5-entity)
     (when (sprite-collide-sprite 
	    0 (peek entity-data (+ npc1-entity entity-id)))
       (set16! text-addr teachersays) ;; what to say
       (show-textbox))
     
     (when (or (sprite-collide-sprite 
		0 (peek entity-data (+ npc2-entity entity-id)))
	       (sprite-collide-sprite 
		0 (peek entity-data (+ npc3-entity entity-id)))
	       (sprite-collide-sprite 
		0 (peek entity-data (+ npc4-entity entity-id)))
	       (sprite-collide-sprite 
		0 (peek entity-data (+ npc5-entity entity-id)))
	       (sprite-collide-sprite 
		0 (peek entity-data (+ npc6-entity entity-id))))
       (set16! text-addr dancersays) ;; what to say
       (show-textbox)))
    ((eq? ggame-mode tobacco-mode)
     (animate-npc smoker1-sprite-pattern-id npc1-entity)
     (animate-npc smoker2-sprite-pattern-id npc2-entity)
     (animate-npc smoker1-sprite-pattern-id npc3-entity)
     (animate-npc smoker2-sprite-pattern-id npc4-entity)

     (when (sprite-collide-sprite 
	    0 (peek entity-data (+ npc1-entity entity-id)))
       (set16! text-addr smoker2says) ;; what to say
       (show-textbox))
     (when (sprite-collide-sprite 
	    0 (peek entity-data (+ npc2-entity entity-id)))
       (set16! text-addr smoker1says) ;; what to say
       (show-textbox)))
    ((eq? ggame-mode michael-mode)
     (animate-npc michael-sprite-pattern-id npc1-entity)
     
     (when (sprite-collide-sprite 
	    0 (peek entity-data (+ npc1-entity entity-id)))
       (set! ggame-state (or ggame-state 4))
       (set16! text-addr michaelsaysfirst) ;; what to say
       (show-textbox))))
     
   ;; exits
   (cond
    ((eq? ggame-mode aerobic-mode)
     (when (doorway-collide-entity 0 doorway-aerobic-out player-entity)
       ;; put player by door
       (poke! entity-data entity-x 32)
       (poke! entity-data entity-y 39)
       (switch-game-mode eighties-mode)))
    ((eq? ggame-mode tobacco-mode)
     (when (doorway-collide-entity 0 doorway-tobacco-out player-entity)
       ;; put player by door
       (poke! entity-data entity-x 213)
       (poke! entity-data entity-screen 1)
       (poke! entity-data entity-y 32)
       (set! gscroll-x 255)
       (switch-game-mode eighties-mode)))
    ((eq? ggame-mode michael-mode)
     (when (doorway-collide-entity 0 doorway-michael-out player-entity)
       ;; put player by door
       (poke! entity-data entity-x 82)
       (poke! entity-data entity-screen 1)
       (poke! entity-data entity-y 109)
       (set! gscroll-x 200)
       (switch-game-mode eighties-mode))
     (when
	 (and (eq? ggame-state 7)
	      (doorway-collide-entity 0 doorway-michael-future player-entity))
       (set! gscroll-x 0)
       (switch-game-mode future-mode))))

   (update-entities)
   
   (inc ganim-frame)
   (when (> ganim-frame 23)
     (set! ganim-frame 0))


   )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; future

 (defun (fuzz)
   ;; random fuzz
   (display-list-add-byte (rnd)) 
   (display-list-end-packet 
    command-tile-data (and (rnd) #b00000111) 
    (<< gframe 2) 1))

 (defun (update-future)
    (cond
     ((eq? gdraw-phase 1) 
      (set! debounce 1)
      (set16! text-addr null_text)
      (set! title-screen 0)
      (set! title-text-line 0)
      (set! password-pos 10)
      (set! gscroll-x 0)
      (update-sprites-title))
     ((eq? gdraw-phase 2)
      (update-screen 11 future-palette-id (low future1_nam) (high future1_nam))
      )
     ;; wait before reveal
     ((eq? gdraw-phase screen-blank-delay)
      (display-list-add-byte future-palette-id) 
      (display-list-end-packet command-palette-change 0 0 1))
     ;; let clear happen first
     ((> gdraw-phase screen-blank-delay)
      (update-typed-text 1 100)     
      ))

    (when (> password-pos 16) (fuzz))
    
    (when (not (any-key)) (set! debounce 1))
    
    ;; slideshow mode
    (cond 
     ((and debounce (any-key))     
      (set! debounce 0)
      (cond 
       ((eq? title-screen 0)
	(draw-screen (low future2_nam) (high future2_nam))
	(set16! text-addr future_1) ;; can you do something for me
	(set! title-screen 1)
	(reset-text))
       
       ((eq? title-screen 1)
	(cond 
	 ((eq? title-text-line 0)
	  (cond 
	   ((pressed joypad-b) 
	    (switch-game-mode michael-mode))
	   (else
	    (draw-screen (low future2_nam) (high future2_nam))
	    (set16! text-addr future_2)
	    (set! title-text-line 1)
	    (reset-text)
	    (set! password-pos 12))))
	 ((eq? title-text-line 1)
	  (inc password-pos)
	  (display-list-add-byte 42)       
	  (display-list-end-packet command-tile-data 2 password-pos 1)
	  (when (> password-pos 19)
	    (switch-game-mode michael-mode)))))))))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; interrupts

 (defint (reset)
   (init-system)
   (disable-rendering)

   ;; set mmc1 so we can update tiles/sprites separately
   ;; (using 4k blocks rather than 8k ones, mirror vertically)
   (mmc1-control #b00010010)

   (init-sound)
   (enable-rendering)
   ;; clear sprite shadow
   (memset sprite-shadow #xff)

   (set! ggame-state 0)
   (set! ggame-mode 0)

   ;; load first palette
   (display-list-add-byte black-palette-id) 
   (display-list-end-packet command-palette-change 0 0 1)

   (asm
    "cli"            ;; restart interrupts again
    "loop: jmp loop" ;; go into in infinite loop - vblank interrupt takes over
    ))

 ;; main loop is here
 (defint (vblank)
   ;; precious ppu update time starts
   ;; start sprite data dma to the oam now
   (set! reg-oam-dma sprite-dma)
   ;; dma the display list now
   (display-list-execute)

   ;; update scroll pos
   ;;(when (not gdisable-scroll)
     (set! reg-ppu-scroll gscroll-x)
     (set! reg-ppu-scroll gscroll-y);)

   ;; precious ppu update time ends

   ;; profiling display (breaks sprite update)
   ;; (asm "
   ;; 	lda #%10001110	
   ;; 	sta $2001
   ;; ")

   ;; update whichever game mode we are in
   (cond
    ((eq? ggame-mode title-mode) (update-title))
    ((eq? ggame-mode eighties-mode) (update-eighties))    
    ((eq? ggame-mode aerobic-mode) (update-indoor))    
    ((eq? ggame-mode tobacco-mode) (update-indoor))    
    ((eq? ggame-mode michael-mode) (update-indoor))    
    (else (update-future)))

   ;; read the joypad state into memory
   (read-joypad)
   (inc gframe)

   ;; increment the draw phase
   (when (not (eq? gdraw-phase 255)) 
     (inc gdraw-phase))

   ;; update sound driver
   (asm "jsr FamiToneUpdate")

   ;; (asm "
   ;; 	lda #%00001110
   ;; 	sta $2001
   ;;  ")
   
   )
 
  (defint (irq))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; game data follows

 ;; text
 (asm "null_text:")(byte "0")
 (asm "intro_1_1:")(text "TODAY STARTED OUT SOLIDWITH A BOWL OF FROSTED  STRAWBERRY POP-TARTS")(byte "0")
 (asm "intro_1_2:")(text "AFTER THAT I HAD A RAD  SKATE SESSION AROUND        THE BLOCK") (byte "0")

 (asm "intro_2_1:")(text " BACK HOME I HEARD A   PACKAGE DROP THROUGH         THE MAILBOX") (byte "0")
 (asm "intro_2_2:")(text "I OPENED IT, AND FOUND    A NINTENDO GAME        CARTRIDGE INSIDE") (byte "0")

 (asm "intro_3_1:")(text "         WEIRD") (byte "0")
 (asm "intro_3_2:")(text " I QUICKLY LOOKED OUT   THE WINDOW TO SEE WHO       DELIVERED IT") (byte "0")
 (asm "intro_3_3:")(text "        TOO LATE") (byte "0")
 (asm "intro_3_4:")(text " CAUGHT A GLIMPSE OF A   BLACK FORD SCORPIO     TURNING THE CORNER") (byte "0")

 (asm "teachersays:")(text "   WELCOME TO STUDIO    FOND O'FONDA! PLEASE    HELP, I CAN'T STOP     MOVING! HIGH IMPACT  STEP AEROBICS YEAAAAAH!")(byte "0")
 (asm "dancersays:")(text "      FEEL MY ABS!")(byte "0")

 (asm "smoker1says:")(text "THERE IS NO PROOF THAT CIGARETTE SMOKING IS A CAUSE FOR *COUGH* LUNG        CANCER")(byte "0")
 (asm "smoker2says:")(text " DON'T LET THEM TAKE   YOUR *COUGH* FREEDOM          AWAY!")(byte "0")
 (asm "smoker3says:")(text "YOU CAN STOP *COUGH* ANYTIME")(byte "0")
 (asm "smoker4says:")(text "THERE IS NO *COUGH* SCIENTIFIC CONSENSUS")(byte "0")

 (asm "michaelsaysfirst:")(text "    WOW, A NES GAME!   THAT'S TOTALLY TUBULAR! MY PARENTS GOT ME ONE AT CHRISTMAS! LET'S TRY         IT!")(byte "0")

 (asm "friendsays:")(text "MICHAEL IS NOT HOME YET YOU SHOULD COME BACK           LATER         ")(byte "0")
 (asm "friendsays2:")(text "YOU'RE IN LUCK, MICHAEL     JUST GOT HOME    ")(byte "0")

 (asm "future_1:")(text "  CAN YOU DO SOMETHING         FOR ME?            PRESS A FOR YES        PRESS B FOR NO")(byte "0")
 (asm "future_2:")(text "    CAN I TRUST YOU?        ENTER THE CODE")(byte "0")

 ;; bounding box data
 (asm "collision_bboxes0:")
 (byte "15") ;; number of boxes
 (byte "0, 0, 255, 32")
 (byte "0, 0, 16, 238")
 (byte "96, 0, 128, 64")
 (byte "176, 0, 223, 65")
 (byte "208, 53, 224, 81")
 (byte "212, 0, 255, 10")
 (byte "238, 0, 255, 17")
 (byte "15, 81, 32, 160")
 (byte "13, 96, 47, 160")
 (byte "80, 96, 160, 160")
 (byte "96, 80, 128, 112")
 (byte "144, 80, 160, 109")
 (byte "199, 96, 240, 177")
 (byte "191, 128, 255, 176")
 (byte "238, 112, 255, 134")


 (asm "collision_bboxes1:")
 (byte "2") ;; number of boxes
 (byte "0, 0, 23, 82")
 (byte "0, 0, 33, 64")

 (asm "collision_bboxes_aerobic:")
 (byte "0")
 (asm "collision_bboxes_tobacco:")
 (byte "0")
 (asm "collision_bboxes_michael:")
 (byte "0")

 (asm "doorway_bbox")
 (byte "32, 16, 48, 32") ;; aerobic in
 (byte "65, 81, 80, 97") ;; aerobic out
 (byte "210, 17, 226, 32") ;; tobacco in
 (byte "144, 80, 160, 96") ;; tobacco out
 (byte "90, 97, 106, 113") ;; michael in
 (byte "65, 81, 80, 97") ;; michael out
 (byte "115, 84, 131, 110") ;; future portal (nes)

 ;; sound code
 (asm ".include \"whatremains/music/famitone2_asm6.asm\"")
;; (asm ".include \"whatremains/music/danger_streets.asm\"")
 ;; (asm ".include \"whatremains/music/whatremains.asm\"")

 ;; the palettes
 (asm "title_palette:")
 (asm ".incbin \"whatremains/binary/title-screen-main.pal\"")
 (asm "title1_palette:")
 (asm ".incbin \"whatremains/binary/cut-01-skate.pal\"")
 (asm "title2_palette:")
 (asm ".incbin \"whatremains/binary/cut-02-cartridge.pal\"")
 (asm "title3_palette:")
 (asm ".incbin \"whatremains/binary/cut-03-car.pal\"")

 (asm "eighties_palette:")
 (asm ".incbin \"whatremains/binary/eighties-palette.pal\"")
 ;; general sprite palette
 (byte "$30,$21,$26,$36")
 (byte "$0f,$25,$2d,$36")
 (byte "$0f,$23,$0b,$36")
 (byte "$0f,$2b,$06,$16")

 (asm "indoor_palette:")
 (asm ".incbin \"whatremains/binary/INDOOR_color_palette.pal\"")
 ;; general sprite palette
 (byte "$30,$21,$26,$36")
 (byte "$0f,$25,$2d,$36")
 (byte "$0f,$23,$0b,$36")
 (byte "$0f,$2b,$06,$16")

 (asm "future_palette:")
 (asm ".incbin \"whatremains/binary/PETSCIIish.pal\"")

 (asm "black_palette:")

 (byte "$0f,$0f,$0f,$0f")
 (byte "$0f,$0f,$0f,$0f")
 (byte "$0f,$0f,$0f,$0f")
 (byte "$0f,$0f,$0f,$0f")

 (byte "$0f,$0f,$0f,$0f")
 (byte "$0f,$0f,$0f,$0f")
 (byte "$0f,$0f,$0f,$0f")
 (byte "$0f,$0f,$0f,$0f")

 ;; screen tiles
 (asm ".align $100") ;; align so we don't need 16 address maths!
 (asm "title_nam:")
 (asm ".incbin \"whatremains/binary/title-screen-main.nam\"")
 (asm "title1_nam:")
 (asm ".incbin \"whatremains/binary/cut-01-skate.nam\"")
 (asm "title2_nam:")
 (asm ".incbin \"whatremains/binary/cut-02-cartridge.nam\"")
 (asm "title3_nam:")
 (asm ".incbin \"whatremains/binary/cut-03-car.nam\"")

 (asm "bgtiles:")
 (asm ".incbin \"whatremains/binary/OUTDOOR_city01.bin\"")
 (asm ".incbin \"whatremains/binary/OUTDOOR_city02.bin\"")

 (asm "aerobic_nam:")
 (asm ".incbin \"whatremains/binary/INDOOR_aerobic.bin\"")
 (asm "tobacco_nam:")
 (asm ".incbin \"whatremains/binary/INDOOR_tobacco.bin\"")
 (asm "michael_nam:")
 (asm ".incbin \"whatremains/binary/INDOOR_michael.bin\"")

 (asm "future1_nam:")
 (asm ".incbin \"whatremains/binary/cart-startup.nam\"")
 (asm "future2_nam:")
 (asm ".incbin \"whatremains/binary/cart-frame.nam\"")

 ;; dmc samples
; (asm "	.org $c000
;        .incbin \"whatremains/music/whatremains.dmc\"")
 

 ;; interrupt vectors (addresses for functions)
 (asm ".pad $fffa") ;; jump to the end of prg-rom
 (asm ".word vblank, reset, irq")

 ;; finally ppu-rom 
 (asm 
  ".align $1000"
   ".incbin \"whatremains/binary/title-screen-main.chr\"" 
   ".incbin \"whatremains/binary/cut-01-skate.chr\""
   ".incbin \"whatremains/binary/cut-02-cartridge.chr\""
   ".incbin \"whatremains/binary/cut-03-car.chr\""
  )

 (asm 
  ".incbin \"whatremains/binary/OUTDOOR_tileset.chr\""
  ".incbin \"whatremains/binary/sprites.chr\"")

 (asm 
  ".incbin \"whatremains/binary/INDOOR_tileset.chr\"")

 (asm 
  ".incbin \"whatremains/binary/PETSCIIish.chr\"")
 
 )
