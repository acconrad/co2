;; -*- mode: lisp; -*-
;; What Remains 
;; Copyright (C) 2016 What Remains Entertainment Consortium
;;
;; Licence TBD

(do
 ;; NES header follows
 (asm
  ".byte \"NES\",$1a" ;; number of prg-rom blocks
  ".byte $01" ;; number of chr-rom blocks
  ".byte $01" ;; rom control bytes: horizontal mirroring, no sram or trainer, mapper #0
  ".byte $00,$00" ;; filler
  ".byte $00,$00,$00,$00,$00,$00,$00,$00")

    ;; our memory layout

 (defaddr sprite-shadow #x200) ;; where the sprite control data is
 (defconst sprite-dma   2) ;; dma address is 100X this = $200
 (defaddr bot-data      #x300)
 (defaddr program-data  #x380)
 (defaddr display-list  #x400) ;; the display list
 (defaddr pad-data      #x500) ;; cache of the current pad state
 (defaddr music-data    #x600)
 (defaddr rnd-reg       #xfc)

 (defconst world-x 132)
 (defconst world-y 165)
 (defconst ppu-palette #x3f00)
 (defconst ppu-name-table-0 #x2000)

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; display primitives
 ;; ------------------
 ;;
 ;; 
 ;; tile-data display primitive: [list of bytes to copy as tile ids]
 (defconst prim-tile-data 1)
 ;; tile-value display primitive: [length tile-id] 
 ;; for clearing screen etc - 128 long is about max for timing
 (defconst prim-tile-value 2)
 ;; 2x2 tile quad [tile top left id]
 (defconst prim-quad 3)

 ;; code start
 (org #xc000)

 ;; globals that will be removed - honest gov
 (defvar gframe 0)
 (defvar phase 0)

 ;; the current display list index 
 (defvar display-list-index 0)

 ;; for use as temporaries (careful not to use them over fncalls
 ;; as they will get clobbered)
 (defvar n 0)
 (defvar i 0)
 (defvar j 0)
 (defvar k 0)
 (defvar l 0)
 (defvar m 0)
 (defvar o 0)
 (defvar p 0)
 (defvar start 0)
 (defvar end 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; library code follows

 ;; really crappy random number generator
 (defsub (rnd) (_rnd))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sound

(defsub (init-sound)
  (set! REG-APU-CHANNEL #b00011111)
  )

(defsub (play-p2 note)
  (set! REG-APU-PULSE2-CONTROL #b10011111)
  (set! REG-APU-PULSE2-FT note)
  (set! REG-APU-PULSE2-CT #b11111000))

(defsub (play-p1 note)
  (set! REG-APU-PULSE1-CONTROL #b10011111)
  (set! REG-APU-PULSE1-FT note)
  (set! REG-APU-PULSE1-CT #b11111000))

(defsub (play-n note)
  (set! REG-APU-NOISE-ENV #b10111111)
  (set! REG-APU-NOISE-FT note)
  (set! REG-APU-NOISE-CT #b00000000))

(defsub (update-music)
  (when (and (>> gframe 3) 1)
    (play-p1 (peek music-data (+ 8 (and (>> gframe 4) #x0f))))
    (play-p2 (peek music-data (and (>> gframe 4) #x0f)))
    (play-n (peek music-data (+ 16 (and (>> gframe 4) #x0f))))
    ;; don't play the same thing twice
    ;;(poke! music-data (and (>> gframe 4) #x0f) (rnd))
    ;(poke! music-data (+ 16 (and (>> gframe 4) #x0f) (rnd)))
    ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; input stuff

 (defsub (read-joypad)
   ;; need to 'strobe' register before reading
   (set! REG-JOYPAD-0 1)
   (set! REG-JOYPAD-0 0)
   (loop n 0 8
         (poke! pad-data n (and (peek REG-JOYPAD-0) #x1))))

 (defsub (pressed key)
   (peek pad-data key))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ppu transfers

 (defsub (load-palette)
   ;; copy 32 bytes of bg and sprite palette
   (ppu-memcpy ppu-palette 0 0 #x20 palette 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display list

(defsub (display-list-add-byte data)
  (poke! display-list display-list-index data) 
  (inc display-list-index))

(defsub (display-list-end-packet prim-id x y nbytes)
  (poke! display-list display-list-index prim-id) 
  (inc display-list-index)
  (poke! display-list display-list-index x)
  (inc display-list-index)
  (poke! display-list display-list-index y)
  (inc display-list-index)
  ;; last byte needs to be size for all primitives
  (poke! display-list display-list-index nbytes) 
  (inc display-list-index))

(defsub (display-list-execute)
  ;; is there anything in the queue?
  (if (eq? display-list-index 0) 0 ;; early out (avoid long branch)
    (do
     ;; reverse to read info (lifo for ease/speed)
     (set! display-list-index (- display-list-index 4))

     (set! n (peek display-list (+ display-list-index 3))) ;; store nbytes
     (set! start (- display-list-index n))
     (set! end display-list-index)

     ;; update tile data
     (when (eq? (peek display-list display-list-index) prim-tile-data) 
       (set! end display-list-index)
       (ppu-memcpy ppu-name-table-0 
		   (peek display-list (+ display-list-index 1)) 
		   (peek display-list (+ display-list-index 2))
		   end ;; w
		   display-list
		   start)) ;; start

     ;; update arbitrary length strips of one value (RLE)
     (when (eq? (peek display-list display-list-index) prim-tile-value) ;; tileset
       (ppu-memset ppu-name-table-0 
		   (peek display-list (+ display-list-index 1)) 
		   (peek display-list (+ display-list-index 2))
		   (peek display-list start) ;; length
		   (peek display-list (+ start 1)))) ;; tile id
     
     (when (eq? (peek display-list display-list-index) prim-quad) 
       (set! o (peek display-list (+ display-list-index 1)))
       (set! p (peek display-list (+ display-list-index 2)))
       (set! i (peek display-list start))
       ;; could be optimised a lot
       (ppu-memset ppu-name-table-0 o p 1 i) 
       (ppu-memset ppu-name-table-0 o (+ p 1) 1 (+ i 1)) 
       (ppu-memset ppu-name-table-0 o (+ p 32) 1 (+ i 16)) 
       (ppu-memset ppu-name-table-0 o (+ p 33) 1 (+ i 17))
       )
     
     (set! display-list-index (- display-list-index n)))))

(defsub (clear-tiles)
  ; nametable 1
  (display-list-add-byte 128)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 0 0 2)
  (display-list-add-byte 128)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 0 128 2)
  (display-list-add-byte 128)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 1 0 2)
  (display-list-add-byte 64)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 1 128 2)
  ; nametable 2
  (display-list-add-byte 128)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 2 0 2)
  (display-list-add-byte 128)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 2 128 2)
  (display-list-add-byte 128)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 3 0 2)
  (display-list-add-byte 64)
  (display-list-add-byte 0)
  (display-list-end-packet prim-tile-value 3 128 2))

(defsub (display-phase-1 x y loc)
  (set! j loc) (set! k (+ x 12)) (set! l y) ;; store to prevent clobbering
  (set! i 0)
  ;; draw top part
  (loop n 0 8 (display-list-add-byte (+ j n)))
  (display-list-end-packet prim-tile-data 2 k 8)
  (loop n 8 16 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-end-packet prim-tile-data 2 (+ k 32) 8)

  ;; first row with rep
  (display-list-add-byte (+ 8 (+ j 8)))
  (display-list-add-byte (+ 8 (+ j 9)))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 8 (+ j 14)))
  (display-list-add-byte (+ 8 (+ j 15)))
  (display-list-end-packet prim-tile-data 2 (+ k 62) 12)

  ;; second row with rep
  (display-list-add-byte (+ 8 (+ j 8)))
  (display-list-add-byte (+ 8 (+ j 9)))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 8 (+ j 14)))
  (display-list-add-byte (+ 8 (+ j 15)))
  (display-list-end-packet prim-tile-data 2 (+ k 92) 16)

  ;; third row with rep
  (display-list-add-byte (+ 8 (+ j 8)))
  (display-list-add-byte (+ 8 (+ j 9)))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 8 (+ j 14)))
  (display-list-add-byte (+ 8 (+ j 15)))
  (display-list-end-packet prim-tile-data 2 (+ k 122) 20)

  ;; forth row with rep
  (display-list-add-byte (+ 8 (+ j 8)))
  (display-list-add-byte (+ 8 (+ j 9)))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 8 (+ j 14)))
  (display-list-add-byte (+ 8 (+ j 15)))
  (display-list-end-packet prim-tile-data 2 (+ k 152) 24)

  ;; turning back
  (display-list-add-byte (+ 24 (+ j 8)))
  (display-list-add-byte (+ 24 (+ j 9)))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 24 (+ j 14)))
  (display-list-add-byte (+ 24 (+ j 15)))
  (display-list-end-packet prim-tile-data 2 (+ k 184) 24)
  )

(defsub (display-phase-2 x y loc)
  (display-list-add-byte (+ 48 j))
  (display-list-add-byte (+ 49 j))
  (display-list-add-byte (+ 50 j))
  (display-list-add-byte (+ 51 j))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 52 j))
  (display-list-add-byte (+ 53 j))
  (display-list-add-byte (+ 54 j))
  (display-list-add-byte (+ 55 j))
  (display-list-end-packet prim-tile-data 2 (+ k 216) 24)

  (display-list-add-byte (+ 48 j))
  (display-list-add-byte (+ 49 j))
  (display-list-add-byte (+ 50 j))
  (display-list-add-byte (+ 51 j))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 52 j))
  (display-list-add-byte (+ 53 j))
  (display-list-add-byte (+ 54 j))
  (display-list-add-byte (+ 55 j))
  (display-list-end-packet prim-tile-data 3 (- k 6) 20)


  (display-list-add-byte (+ 48 j))
  (display-list-add-byte (+ 49 j))
  (display-list-add-byte (+ 50 j))
  (display-list-add-byte (+ 51 j))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 52 j))
  (display-list-add-byte (+ 53 j))
  (display-list-add-byte (+ 54 j))
  (display-list-add-byte (+ 55 j))
  (display-list-end-packet prim-tile-data 3 (+ k 28) 16)

  (display-list-add-byte (+ 48 j))
  (display-list-add-byte (+ 49 j))
  (display-list-add-byte (+ 50 j))
  (display-list-add-byte (+ 51 j))
  (loop n 10 14 (display-list-add-byte (+ 8 (+ j n))))
  (display-list-add-byte (+ 52 j))
  (display-list-add-byte (+ 53 j))
  (display-list-add-byte (+ 54 j))
  (display-list-add-byte (+ 55 j))
  (display-list-end-packet prim-tile-data 3 (+ k 62) 12)

  (display-list-add-byte (+ 48 j))
  (display-list-add-byte (+ 49 j))
  (display-list-add-byte (+ 50 j))
  (display-list-add-byte (+ 51 j))
  (display-list-add-byte (+ 52 j))
  (display-list-add-byte (+ 53 j))
  (display-list-add-byte (+ 54 j))
  (display-list-add-byte (+ 55 j))
  (display-list-end-packet prim-tile-data 3 (+ k 96) 8)

  (display-list-add-byte (+ 48 j))
  (display-list-add-byte (+ 49 j))
  (display-list-add-byte (+ 54 j))
  (display-list-add-byte (+ 55 j))
  (display-list-end-packet prim-tile-data 3 (+ k 130) 4)

  )

(defsub (display-prog-a)
  (draw-prog-top 0))

(defsub (display-prog-b)
  (draw-prog-bot 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; programs

(defconst program-size 32)

(defsub (draw-instr hoffs yoffs p instr)
  (display-list-add-byte (+ 8 (<< instr 1)))
  (display-list-end-packet prim-quad hoffs (+ yoffs (+ 8 (<< p 1))) 1))

(defsub (draw-prog-top p)
  (loop n 0 8 (draw-instr 0 64 n (peek program-data n))) 
  (loop n 0 8 (draw-instr 0 128 n (peek program-data (+ n 8))))
  (loop n 0 8 (draw-instr 0 192 n (peek program-data (+ n 16))))
  (loop n 0 8 (draw-instr 1 0 n (peek program-data (+ n 24)))))

(defsub (draw-prog-bot p)
  )

(defsub (init-programs)
  (loop n 0 33
	(poke! program-data n (and (+ (>> n 3) (xor n 142)) 3))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bots

(defconst bot-x 0) ; logical world pos
(defconst bot-y 1)
(defconst bot-sprite 2)
(defconst bot-dir 3) ;; nw,ne,se,sw
(defconst bot-audio 4)
(defconst bot-size 8)

(defconst num-bots 5)

(defsub (init-bots)
  (set! i 0)
  (loop n 0 num-bots
	(poke! bot-data (+ i 2) (<< n 2))
	(poke! bot-data (+ i 3) (and n 3))
	(set! i (+ i bot-size))))

(defsub (animate-sprites-2x2! sprite-num n)
  (lda sprite-num)
  (asl a)
  (asl a)
  (tax)
  (lda n)
  (sta (addr #x201) x)
  (adc 1)
  (sta (addr #x205) x)
  (adc #x0f)
  (sta (addr #x209) x)
  (adc 1)
  (sta (addr #x20d) x))

(defsub (update-bot bot)
  (set! i (<< bot 3))
  (set! j (peek bot-data (+ i 2)))

  (when (eq? (and gframe #x0f) 0)
    (poke! bot-data (+ i 3) (and (+ (peek bot-data (+ i 3)) 1) 3)))

  ;;nw,ne,se,sw
  (cond 
   ((eq? (peek bot-data (+ i bot-dir)) 0) ;; nw
    (animate-sprites-2x2! j #x02)
    (sub-sprites-x! j 4 1)
    (when (and #x01 gframe) (sub-sprites-y! j 4 1)))
   ((eq? (peek bot-data (+ i bot-dir)) 1) ;; ne
    (animate-sprites-2x2! j #x04)
    (add-sprites-x! j 4 1) 
    (when (and #x01 gframe) (sub-sprites-y! j 4 1)))
   ((eq? (peek bot-data (+ i bot-dir)) 2) ;; se
    (animate-sprites-2x2! j #x06)
    (add-sprites-x! j 4 1) 
    (when (and #x01 gframe) (add-sprites-y! j 4 1)))
   (else ;; sw
    (animate-sprites-2x2! j #x00)
    (sub-sprites-x! j 4 1) 
    (when (and #x01 gframe) (add-sprites-y! j 4 1)))))

(defsub (update-bots)
  ;;(poke! bot-data bot-sprite 4)	
 ;; (update-bot 1)
  (loop n 0 num-bots (update-bot n))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; sprite stuff
 
 ;; 2x2 block sprites
 (defsub (setup-character block id)
   (set-sprite-x! id 0)
   (set-sprite-y! id 0)
   (set-sprite-id! id block)

   (set-sprite-x! (+ 1 id) 8)
   (set-sprite-y! (+ 1 id) 0)
   (set-sprite-id! (+ 1 id) (+ 1 block))

   (set-sprite-x! (+ 2 id) 0)
   (set-sprite-y! (+ 2 id) 8)
   (set-sprite-id! (+ 2 id) (+ 16 block))

   (set-sprite-x! (+ 3 id) 8)
   (set-sprite-y! (+ 3 id) 8)
   (set-sprite-id! (+ 3 id) (+ 17 block)))

 (defsub (init-sprites)
   ;; clear page #2, which we'll use to hold sprite data
   ;; (memset writes 256 bytes in one go)
   (memset sprite-shadow #x0)

   (setup-character #x0 0)
   (add-sprites-x! 0 4 world-x)
   (add-sprites-y! 0 4 world-y)
   (or-sprites-attr! 0 4 00)

   (setup-character #x0 4)
   (add-sprites-x! 4 4 world-x)
   (add-sprites-y! 4 4 world-y)
   (or-sprites-attr! 4 4 01)

   (setup-character #x0 8)
   (add-sprites-x! 8 4 world-x)
   (add-sprites-y! 8 4 world-y)
   (or-sprites-attr! 8 4 10)

   (setup-character #x0 12)
   (add-sprites-x! 12 4 world-x)
   (add-sprites-y! 12 4 world-y)
   (or-sprites-attr! 12 4 11)

   (setup-character #x0 16)
   (add-sprites-x! 16 4 world-x)
   (add-sprites-y! 16 4 world-y)
   (or-sprites-attr! 16 4 11)

   (defvar direction 1)
   
   )

 (defsub (update-sprite)
   ;; do sprite stuff here.
   ;; reads the joypad state into memory to save time
   ;; probably premature optimisation
   (read-joypad)

   ;; is the player character moving?
   (defvar running 1)

   ;; player character
   ;(animate-sprites-2x2! 0 direction)
   )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; interrupts

 (defvector (reset)
   (init-system)

   ;;(init-sound)

   ;; disable all graphics.
   (set! REG-PPU-CTRL 0)
   (set! REG-PPU-MASK 0)
   (set! REG-PPU-SCROLL 0)
   (set! REG-PPU-SCROLL 0)
   ;; send stuff to the ppu here...


   (load-palette)

   ;; set basic ppu registers.  load background from $0000,
   ;; sprites from $1000, and the name table from $2000.
   (set! REG-PPU-CTRL #b10001000)
   (set! REG-PPU-MASK #b00011110)

   (display-phase-1 0 0 #x10)
   ;;(clear-tiles)
   (set! rnd-reg 123)
   (init-sprites)
   (init-bots)
   (init-programs)
   
   (asm
    ;; restart interrupts again
    "cli"
    ;; go into in infinite loop - vblank interrupt takes over
    "loop: jmp loop"))


 ;; main loop is here
 (defvector (nmi)
   ;; these need to go first!
   ;; start sprite data dma to the oam
   (set! REG-OAM-DMA sprite-dma)
   (display-list-execute)

   (when (and (eq? gframe 50) (eq? phase 0))
     (inc phase)
     (display-phase-2 0 0 #x10)
     )

   (when (and (eq? gframe 100) (eq? phase 1))
     (inc phase)
     (display-prog-a)
     )

   (when (and (eq? gframe 200) (eq? phase 2))
     (inc phase)
     (display-prog-b)
     )

   (when (eq? phase 3)
     (update-bots))

  
   ;(update-music)

   (inc gframe)
   )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; data follows

 (asm "mystring:")
;       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 (text " What remains? TESTING text 1234")
 
 ;; stuff still to tidy up follows...

 (deflabel palette)
 (byte "$0f,$1c,$2c,$3c,$0f,$02,$03,$04,$0f,$02,$03,$0c,$0f,$1c,$2c,$3c")
 (byte "$0f,$18,$28,$38,$0f,$1c,$2c,$3c,$0f,$13,$23,$33,$0f,$19,$29,$39")

 (asm "bg:")
  ;; attribute table
 (byte "$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00")
 (byte "$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00")
 (byte "$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0")
 (byte "$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f")
 (asm ".pad $fffa")

;; interrupt vectors (addresses for functions)
 (asm ".word nmi, reset, 0")

 ;; finally all the chr data
 (asm 
  ".incbin \"aljazari/binary/aljazari.chr\"")
 
 )
